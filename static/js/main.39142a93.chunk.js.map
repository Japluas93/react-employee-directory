{"version":3,"sources":["utils/API.js","components/Employee.js","components/Table.js","components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["axios","get","Employee","text","employee","employees","setEmployees","data","setData","src","picture","medium","alt","name","first","last","cell","onClick","filter","el","id","Table","filteredEmployees","className","map","Form","setInputText","inputText","setStatus","value","onChange","e","target","type","placeholder","preventDefault","completed","Math","random","App","useState","status","setFilteredEmployees","useEffect","getData","getLocalEmployees","filterHandler","saveLocalEmployees","API","then","res","results","catch","err","console","log","localStorage","setItem","JSON","stringify","getItem","localEmployee","parse","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39142a93.chunk.js","sourcesContent":["import axios from \"axios\";\r\nexport default {\r\n  getEmployees: function () {\r\n    return axios.get(\"https://randomuser.me/api/?results=50\");\r\n  },\r\n};\r\n","import React from \"react\";\r\n\r\nconst Employee = ({\r\n  text,\r\n  employee,\r\n  employees,\r\n  setEmployees,\r\n  data,\r\n  setData,\r\n}) => {\r\n  const deleteHandler = () => {\r\n    setEmployees(employees.filter((el) => el.id !== employee.id));\r\n  };\r\n\r\n  return (\r\n    <tr>\r\n      <td>\r\n        <img src={employee.picture.medium} alt=\"employee\" />\r\n      </td>\r\n      <td>{employee.name.first}</td>\r\n      <td>{employee.name.last}</td>\r\n      <td>{employee.cell}</td>\r\n      <td>\r\n        <button onClick={deleteHandler}></button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default Employee;\r\n","import React from \"react\";\r\nimport Employee from \"./Employee\";\r\nconst Table = ({\r\n  employees,\r\n  setEmployees,\r\n  filteredEmployees,\r\n  data,\r\n  setData,\r\n}) => {\r\n  return (\r\n    <div className=\"employee-container\">\r\n      <ul className=\"employee-list\">\r\n        {data.map((employee) => (\r\n          <Employee\r\n            setEmployees={setEmployees}\r\n            setData={setData}\r\n            data={data}\r\n            employees={employees}\r\n            employee={employee}\r\n            text={employee.text}\r\n            key={employee.cell}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\nexport default Table;\r\n","const Form = ({\r\n  setInputText,\r\n  employees,\r\n  setEmployees,\r\n  inputText,\r\n  setStatus,\r\n}) => {\r\n  const inputTextHandler = (e) => {\r\n    setInputText(e.target.value);\r\n  };\r\n\r\n  const submitEmployeeHandler = (e) => {\r\n    e.preventDefault();\r\n    setEmployees([\r\n      ...employees,\r\n      { text: inputText, completed: false, id: Math.random() * 1000 },\r\n    ]);\r\n    setInputText(\"\");\r\n  };\r\n\r\n  const statusHandler = (e) => {\r\n    setStatus(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <input\r\n        value={inputText}\r\n        onChange={inputTextHandler}\r\n        type=\"text\"\r\n        placeholder=\"Search by name\"\r\n      />\r\n      <button onClick={submitEmployeeHandler} type=\"submit\"></button>\r\n      <div>\r\n        <select onChange={statusHandler} name=\"todos\">\r\n          <option value=\"all\">All</option>\r\n          <option value=\"completed\">Completed</option>\r\n          <option value=\"uncompleted\">Uncompleted</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nexport default Form;\r\n","// import axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport API from \"./utils/API\";\nimport Table from \"./components/Table\";\nimport Form from \"./components/Form\";\nfunction App() {\n  // Setting the state\n  const [inputText, setInputText] = useState(\"\");\n  const [employees, setEmployees] = useState([]);\n  const [status, setStatus] = useState(\"all\");\n  const [filteredEmployees, setFilteredEmployees] = useState([]);\n  const [data, setData] = useState([]);\n  // const [employees, setEmployees] = useState([]);\n  // useEffect(() => {\n  //   fetch(api)\n  //     .then((res) => res.json())\n  //     .then((data) => {\n  //       console.log(data.results);\n  //       setEmployees(data.results);\n  //     });\n  // }, []);\n  // const sortAge = () => {\n  //   let sorted = employees.sort((a, b) => a.dob.age - b.dob.age);\n  //   setEmployees(sorted);\n  // };\n  // return (\n  //   <div className=\"App\">\n  //     <button onClick={sortAge}>Sort by age</button>\n  //     {employees.map((employee) => (\n  //       <h1>{employee.name.first}</h1>\n  //       // <table>\n  //       //   <tr>\n  //       //     <th>{employee.name.first}</th>\n  //       //     <th>{employee.name.last}</th>\n  //       //   </tr>\n  //       // </table>\n  //     ))}\n  //   </div>\n  // );\n  useEffect(() => {\n    getData();\n    getLocalEmployees();\n  }, []);\n\n  useEffect(() => {\n    filterHandler();\n    saveLocalEmployees();\n  }, [employees, status]);\n\n  const getData = () => {\n    API.getEmployees()\n      .then((res) => setData(res.data.results))\n      .catch((err) => console.log(err));\n  };\n  const filterHandler = () => {\n    switch (status) {\n      case \"completed\":\n        setFilteredEmployees(\n          employees.filter((employee) => employee.completed === true)\n        );\n        break;\n      case \"uncompleted\":\n        setFilteredEmployees(\n          employees.filter((employee) => employee.completed === false)\n        );\n      default:\n        setFilteredEmployees(employees);\n        break;\n    }\n  };\n  const saveLocalEmployees = () => {\n    localStorage.setItem(\"employees\", JSON.stringify(data));\n  };\n  const getLocalEmployees = () => {\n    if (localStorage.getItem(\"employees\") === null) {\n      localStorage.setItem(\"employees\", JSON.stringify([]));\n    } else {\n      let localEmployee = JSON.parse(localStorage.getItem(\"employees\"));\n\n      setEmployees(localEmployee);\n    }\n  };\n  return (\n    <div>\n      <header>\n        <h1>Employee Directory</h1>\n      </header>\n      <Form\n        inputText={inputText}\n        employees={employees}\n        setEmployees={setEmployees}\n        setInputText={setInputText}\n        setStatus={setStatus}\n        data={data}\n        setData={setData}\n      />\n      <Table\n        setEmployees={setEmployees}\n        employees={employees}\n        filteredEmployees={filteredEmployees}\n        data={data.filter((employee) =>\n          `${employee.name.first} ${employee.name.last}`\n            .toLowerCase()\n            .includes(inputText.toLowerCase())\n        )}\n        setData={setData}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}